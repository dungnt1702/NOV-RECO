from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from users.models import Department, UserRole
from checkin.models import Area, Checkin
from django.utils import timezone
import random
from datetime import datetime, timedelta

User = get_user_model()


class Command(BaseCommand):
    help = 'T·∫°o d·ªØ li·ªáu m·∫´u cho t·∫•t c·∫£ modules'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi t·∫°o m·ªõi',
        )

    def handle(self, *args, **options):
        if options['clear']:
            self.stdout.write('üóëÔ∏è  X√≥a d·ªØ li·ªáu c≈©...')
            Checkin.objects.all().delete()
            User.objects.filter(is_superuser=False).delete()
            Department.objects.all().delete()
            Area.objects.all().delete()
            self.stdout.write(self.style.SUCCESS('‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu c≈©'))

        self.stdout.write('üöÄ B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u...')

        # 1. T·∫°o Departments
        self.create_departments()

        # 2. T·∫°o Users
        self.create_users()

        # 3. T·∫°o Areas
        self.create_areas()

        # 4. T·∫°o Check-ins
        self.create_checkins()

        self.stdout.write(self.style.SUCCESS('‚úÖ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u!'))

    def create_departments(self):
        """T·∫°o c√°c ph√≤ng ban m·∫´u"""
        self.stdout.write('üìÅ T·∫°o ph√≤ng ban...')
        
        departments_data = [
            {
                'name': 'Ph√≤ng C√¥ng ngh·ªá th√¥ng tin',
                'description': 'Ph·ª• tr√°ch ph√°t tri·ªÉn v√† b·∫£o tr√¨ h·ªá th·ªëng c√¥ng ngh·ªá th√¥ng tin'
            },
            {
                'name': 'Ph√≤ng Nh√¢n s·ª±',
                'description': 'Qu·∫£n l√Ω nh√¢n s·ª±, tuy·ªÉn d·ª•ng v√† ƒë√†o t·∫°o nh√¢n vi√™n'
            },
            {
                'name': 'Ph√≤ng K·∫ø to√°n',
                'description': 'Qu·∫£n l√Ω t√†i ch√≠nh, k·∫ø to√°n v√† b√°o c√°o t√†i ch√≠nh'
            },
            {
                'name': 'Ph√≤ng Kinh doanh',
                'description': 'Ph√°t tri·ªÉn kinh doanh, marketing v√† b√°n h√†ng'
            },
            {
                'name': 'Ph√≤ng S·∫£n xu·∫•t',
                'description': 'Qu·∫£n l√Ω s·∫£n xu·∫•t, ch·∫•t l∆∞·ª£ng v√† logistics'
            },
            {
                'name': 'Ph√≤ng H√†nh ch√≠nh',
                'description': 'Qu·∫£n l√Ω h√†nh ch√≠nh, vƒÉn ph√≤ng v√† h·ªó tr·ª£'
            }
        ]

        departments = []
        for dept_data in departments_data:
            dept, created = Department.objects.get_or_create(
                name=dept_data['name'],
                defaults={'description': dept_data['description']}
            )
            departments.append(dept)
            if created:
                self.stdout.write(f'  ‚úÖ T·∫°o ph√≤ng ban: {dept.name}')

        self.departments = departments
        return departments

    def create_users(self):
        """T·∫°o ng∆∞·ªùi d√πng m·∫´u"""
        self.stdout.write('üë• T·∫°o ng∆∞·ªùi d√πng...')

        # L·∫•y admin hi·ªán t·∫°i ƒë·ªÉ l√†m manager c·ªßa m·ªôt s·ªë ph√≤ng ban
        admin = User.objects.filter(is_superuser=True).first()
        
        users_data = [
            # Managers
            {
                'username': 'manager_it',
                'email': 'manager.it@company.com',
                'first_name': 'Nguy·ªÖn',
                'last_name': 'VƒÉn A',
                'role': UserRole.MANAGER,
                'department': self.departments[0],  # IT
                'employee_id': 'MNG001',
                'is_active': True
            },
            {
                'username': 'manager_hr',
                'email': 'manager.hr@company.com',
                'first_name': 'Tr·∫ßn',
                'last_name': 'Th·ªã B',
                'role': UserRole.MANAGER,
                'department': self.departments[1],  # HR
                'employee_id': 'MNG002',
                'is_active': True
            },
            {
                'username': 'manager_finance',
                'email': 'manager.finance@company.com',
                'first_name': 'L√™',
                'last_name': 'VƒÉn C',
                'role': UserRole.MANAGER,
                'department': self.departments[2],  # Finance
                'employee_id': 'MNG003',
                'is_active': True
            },

            # HCNS
            {
                'username': 'hcns_main',
                'email': 'hcns.main@company.com',
                'first_name': 'Ph·∫°m',
                'last_name': 'Th·ªã D',
                'role': UserRole.HCNS,
                'department': self.departments[1],  # HR
                'employee_id': 'HCNS001',
                'is_active': True
            },
            {
                'username': 'hcns_recruit',
                'email': 'hcns.recruit@company.com',
                'first_name': 'Ho√†ng',
                'last_name': 'VƒÉn E',
                'role': UserRole.HCNS,
                'department': self.departments[1],  # HR
                'employee_id': 'HCNS002',
                'is_active': True
            },

            # Employees
            {
                'username': 'dev_001',
                'email': 'dev001@company.com',
                'first_name': 'Nguy·ªÖn',
                'last_name': 'VƒÉn F',
                'role': UserRole.EMPLOYEE,
                'department': self.departments[0],  # IT
                'employee_id': 'EMP001',
                'is_active': True
            },
            {
                'username': 'dev_002',
                'email': 'dev002@company.com',
                'first_name': 'Tr·∫ßn',
                'last_name': 'Th·ªã G',
                'role': UserRole.EMPLOYEE,
                'department': self.departments[0],  # IT
                'employee_id': 'EMP002',
                'is_active': True
            },
            {
                'username': 'accountant_001',
                'email': 'accountant001@company.com',
                'first_name': 'L√™',
                'last_name': 'Th·ªã H',
                'role': UserRole.EMPLOYEE,
                'department': self.departments[2],  # Finance
                'employee_id': 'EMP003',
                'is_active': True
            },
            {
                'username': 'sales_001',
                'email': 'sales001@company.com',
                'first_name': 'Ph·∫°m',
                'last_name': 'VƒÉn I',
                'role': UserRole.EMPLOYEE,
                'department': self.departments[3],  # Sales
                'employee_id': 'EMP004',
                'is_active': True
            },
            {
                'username': 'production_001',
                'email': 'production001@company.com',
                'first_name': 'Ho√†ng',
                'last_name': 'Th·ªã J',
                'role': UserRole.EMPLOYEE,
                'department': self.departments[4],  # Production
                'employee_id': 'EMP005',
                'is_active': True
            },
            {
                'username': 'admin_001',
                'email': 'admin001@company.com',
                'first_name': 'V≈©',
                'last_name': 'VƒÉn K',
                'role': UserRole.EMPLOYEE,
                'department': self.departments[5],  # Admin
                'employee_id': 'EMP006',
                'is_active': True
            }
        ]

        users = []
        for user_data in users_data:
            user, created = User.objects.get_or_create(
                username=user_data['username'],
                defaults={
                    'email': user_data['email'],
                    'first_name': user_data['first_name'],
                    'last_name': user_data['last_name'],
                    'role': user_data['role'],
                    'department': user_data['department'],
                    'employee_id': user_data['employee_id'],
                    'is_active': user_data['is_active']
                }
            )
            
            if created:
                # Set password m·∫∑c ƒë·ªãnh
                user.set_password('password123')
                user.save()
                self.stdout.write(f'  ‚úÖ T·∫°o user: {user.username} ({user.get_role_display()})')
            else:
                self.stdout.write(f'  ‚ö†Ô∏è  User ƒë√£ t·ªìn t·∫°i: {user.username}')
            
            users.append(user)

        # C·∫≠p nh·∫≠t manager cho departments
        self.departments[0].manager = users[0]  # IT manager
        self.departments[0].save()
        self.departments[1].manager = users[1]  # HR manager
        self.departments[1].save()
        self.departments[2].manager = users[2]  # Finance manager
        self.departments[2].save()

        self.users = users
        return users

    def create_areas(self):
        """T·∫°o khu v·ª±c m·∫´u"""
        self.stdout.write('üìç T·∫°o khu v·ª±c...')

        # L·∫•y admin ƒë·ªÉ l√†m created_by
        admin = User.objects.filter(is_superuser=True).first()
        
        areas_data = [
            {
                'name': 'VƒÉn ph√≤ng ch√≠nh',
                'description': 'T√≤a nh√† vƒÉn ph√≤ng ch√≠nh c·ªßa c√¥ng ty',
                'lat': 21.0285,
                'lng': 105.8542,
                'radius_m': 100
            },
            {
                'name': 'Nh√† m√°y s·∫£n xu·∫•t',
                'description': 'Khu v·ª±c nh√† m√°y s·∫£n xu·∫•t ch√≠nh',
                'lat': 21.0385,
                'lng': 105.8642,
                'radius_m': 150
            },
            {
                'name': 'Kho h√†ng',
                'description': 'Khu v·ª±c kho h√†ng v√† logistics',
                'lat': 21.0485,
                'lng': 105.8742,
                'radius_m': 80
            },
            {
                'name': 'Chi nh√°nh H√† N·ªôi',
                'description': 'Chi nh√°nh t·∫°i H√† N·ªôi',
                'lat': 21.0185,
                'lng': 105.8342,
                'radius_m': 120
            },
            {
                'name': 'VƒÉn ph√≤ng ƒë·∫°i di·ªán',
                'description': 'VƒÉn ph√≤ng ƒë·∫°i di·ªán t·∫°i trung t√¢m th√†nh ph·ªë',
                'lat': 21.0085,
                'lng': 105.8142,
                'radius_m': 90
            }
        ]

        areas = []
        for area_data in areas_data:
            area, created = Area.objects.get_or_create(
                name=area_data['name'],
                defaults={
                    'description': area_data['description'],
                    'lat': area_data['lat'],
                    'lng': area_data['lng'],
                    'radius_m': area_data['radius_m'],
                    'created_by': admin,
                    'is_active': True
                }
            )
            areas.append(area)
            if created:
                self.stdout.write(f'  ‚úÖ T·∫°o khu v·ª±c: {area.name}')

        self.areas = areas
        return areas

    def create_checkins(self):
        """T·∫°o check-in m·∫´u"""
        self.stdout.write('üìù T·∫°o check-in m·∫´u...')

        # T·∫°o check-ins trong 30 ng√†y qua
        end_date = timezone.now()
        start_date = end_date - timedelta(days=30)

        checkin_count = 0
        for user in self.users:
            # M·ªói user c√≥ 15-25 check-ins trong 30 ng√†y
            num_checkins = random.randint(15, 25)
            
            for i in range(num_checkins):
                # Random th·ªùi gian trong 30 ng√†y qua
                random_days = random.randint(0, 29)
                random_hours = random.randint(8, 17)  # Gi·ªù l√†m vi·ªác
                random_minutes = random.randint(0, 59)
                
                checkin_time = start_date + timedelta(
                    days=random_days,
                    hours=random_hours,
                    minutes=random_minutes
                )
                
                # Random khu v·ª±c
                area = random.choice(self.areas)
                
                # Random t·ªça ƒë·ªô trong khu v·ª±c
                lat_offset = random.uniform(-0.001, 0.001)
                lng_offset = random.uniform(-0.001, 0.001)
                
                lat = area.lat + lat_offset
                lng = area.lng + lng_offset
                
                # Random ghi ch√∫
                notes = [
                    'Check-in b√¨nh th∆∞·ªùng',
                    'ƒê·∫øn s·ªõm ƒë·ªÉ chu·∫©n b·ªã c√¥ng vi·ªác',
                    'H·ªçp team bu·ªïi s√°ng',
                    'Ki·ªÉm tra h·ªá th·ªëng',
                    'L√†m vi·ªác t·ª´ xa',
                    'H·ªçp v·ªõi kh√°ch h√†ng',
                    'Ki·ªÉm tra ti·∫øn ƒë·ªô d·ª± √°n',
                    'ƒê√†o t·∫°o nh√¢n vi√™n m·ªõi',
                    'B√°o c√°o tu·∫ßn',
                    'Ki·ªÉm tra kho h√†ng'
                ]
                
                note = random.choice(notes)
                
                checkin = Checkin.objects.create(
                    user=user,
                    area=area,
                    lat=lat,
                    lng=lng,
                    distance_m=random.uniform(0, 50),
                    note=note,
                    ip='192.168.1.100',
                    created_at=checkin_time
                )
                
                checkin_count += 1

        self.stdout.write(f'  ‚úÖ T·∫°o {checkin_count} check-ins m·∫´u')

        return checkin_count