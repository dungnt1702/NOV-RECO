#!/usr/bin/env python
"""
Management command ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u ƒë·∫ßy ƒë·ªß cho t·∫•t c·∫£ c√°c module
"""
import random
from datetime import datetime, timedelta, date, time
from decimal import Decimal

from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.utils import timezone
from django.db import transaction

from apps.users.models import User, UserRole, Office, Department
from apps.location.models import Location
from apps.checkin.models import Checkin, Checkout, CheckinType
from apps.absence.models import AbsenceType, AbsenceRequest, ApprovalWorkflow, ApprovalHistory
from apps.notifications.models import Notification
from apps.module_settings.models import ModuleSettings
from apps.automation_test.models import TestSession, TestResult, TestLog

User = get_user_model()


class Command(BaseCommand):
    help = "T·∫°o d·ªØ li·ªáu m·∫´u ƒë·∫ßy ƒë·ªß cho t·∫•t c·∫£ c√°c module"

    def add_arguments(self, parser):
        parser.add_argument(
            "--clear",
            action="store_true",
            help="X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi t·∫°o m·ªõi",
        )

    def handle(self, *args, **options):
        if options["clear"]:
            self.stdout.write("üóëÔ∏è  X√≥a d·ªØ li·ªáu c≈©...")
            self.clear_data()

        self.stdout.write("üöÄ B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u...")

        with transaction.atomic():
            # 1. T·∫°o Module Settings
            self.create_module_settings()

            # 2. T·∫°o Offices v√† Departments
            offices, departments = self.create_offices_and_departments()

            # 3. T·∫°o Users
            users = self.create_users(offices, departments)

            # 4. T·∫°o Locations
            locations = self.create_locations(users)

            # 5. T·∫°o Absence Types v√† Workflows
            absence_types, workflows = self.create_absence_types_and_workflows(departments)

            # 6. T·∫°o Check-ins v√† Check-outs
            self.create_checkins_and_checkouts(users, locations)

            # 7. T·∫°o Absence Requests
            self.create_absence_requests(users, absence_types, workflows)

            # 8. T·∫°o Notifications
            self.create_notifications(users)

            # 9. T·∫°o Test Sessions
            self.create_test_sessions(users)

        self.stdout.write(
            self.style.SUCCESS("‚úÖ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu m·∫´u!")
        )
        self.print_login_info(users)

    def clear_data(self):
        """X√≥a d·ªØ li·ªáu c≈©"""
        models_to_clear = [
            TestLog, TestResult, TestSession,
            ApprovalHistory, AbsenceRequest, ApprovalWorkflow, AbsenceType,
            Notification, Checkout, Checkin, Location,
            Department, Office, ModuleSettings
        ]
        
        # Gi·ªØ l·∫°i superuser
        User.objects.filter(is_superuser=False).delete()
        
        for model in models_to_clear:
            model.objects.all().delete()

    def create_module_settings(self):
        """T·∫°o c√†i ƒë·∫∑t module"""
        self.stdout.write("‚öôÔ∏è  T·∫°o Module Settings...")
        
        modules = [
            ("checkin", "H·ªá th·ªëng Check-in", "Qu·∫£n l√Ω ch·∫•m c√¥ng v√† ƒëi·ªÉm danh"),
            ("location", "Qu·∫£n l√Ω ƒê·ªãa ƒëi·ªÉm", "Qu·∫£n l√Ω c√°c ƒë·ªãa ƒëi·ªÉm l√†m vi·ªác"),
            ("users", "Qu·∫£n l√Ω Ng∆∞·ªùi d√πng", "Qu·∫£n l√Ω th√¥ng tin nh√¢n vi√™n"),
            ("dashboard", "Dashboard", "B·∫£ng ƒëi·ªÅu khi·ªÉn t·ªïng quan"),
            ("notifications", "Th√¥ng b√°o", "H·ªá th·ªëng th√¥ng b√°o"),
            ("absence", "Qu·∫£n l√Ω V·∫Øng m·∫∑t", "Qu·∫£n l√Ω ƒë∆°n xin ngh·ªâ ph√©p"),
            ("reports", "B√°o c√°o", "H·ªá th·ªëng b√°o c√°o"),
            ("analytics", "Ph√¢n t√≠ch", "Ph√¢n t√≠ch d·ªØ li·ªáu"),
            ("automation_test", "Ki·ªÉm th·ª≠ t·ª± ƒë·ªông", "H·ªá th·ªëng ki·ªÉm th·ª≠"),
        ]
        
        for module_name, display_name, description in modules:
            ModuleSettings.objects.get_or_create(
                module_name=module_name,
                defaults={
                    "display_name": display_name,
                    "description": description,
                    "is_enabled": True,
                }
            )

    def create_offices_and_departments(self):
        """T·∫°o vƒÉn ph√≤ng v√† ph√≤ng ban"""
        self.stdout.write("üè¢ T·∫°o Offices v√† Departments...")
        
        # T·∫°o Offices
        offices_data = [
            ("VƒÉn ph√≤ng H√† N·ªôi", "Tr·ª• s·ªü ch√≠nh t·∫°i H√† N·ªôi"),
            ("VƒÉn ph√≤ng TP.HCM", "Chi nh√°nh t·∫°i TP. H·ªì Ch√≠ Minh"),
            ("VƒÉn ph√≤ng ƒê√† N·∫µng", "Chi nh√°nh t·∫°i ƒê√† N·∫µng"),
        ]
        
        offices = []
        for name, description in offices_data:
            office, created = Office.objects.get_or_create(
                name=name,
                defaults={"description": description}
            )
            offices.append(office)
            if created:
                self.stdout.write(f"  ‚úÖ T·∫°o office: {name}")

        # T·∫°o Departments
        departments_data = [
            ("IT", "C√¥ng ngh·ªá th√¥ng tin"),
            ("HR", "Nh√¢n s·ª±"),
            ("Finance", "T√†i ch√≠nh"),
            ("Sales", "Kinh doanh"),
            ("Marketing", "Ti·∫øp th·ªã"),
            ("Operations", "V·∫≠n h√†nh"),
        ]
        
        departments = []
        for name, description in departments_data:
            for office in offices:
                dept, created = Department.objects.get_or_create(
                    name=name,
                    office=office,
                    defaults={"description": description}
                )
                departments.append(dept)
                if created:
                    self.stdout.write(f"  ‚úÖ T·∫°o department: {name} - {office.name}")

        return offices, departments

    def create_users(self, offices, departments):
        """T·∫°o users"""
        self.stdout.write("üë• T·∫°o Users...")
        
        users_data = [
            # Admin
            ("admin", "admin@nov-reco.com", "Admin", "System", UserRole.ADMIN, "ADM001", None),
            
            # Managers
            ("manager_it", "manager.it@nov-reco.com", "Nguy·ªÖn", "VƒÉn A", UserRole.MANAGER, "MGR001", "IT"),
            ("manager_hr", "manager.hr@nov-reco.com", "Tr·∫ßn", "Th·ªã B", UserRole.MANAGER, "MGR002", "HR"),
            ("manager_sales", "manager.sales@nov-reco.com", "L√™", "VƒÉn C", UserRole.MANAGER, "MGR003", "Sales"),
            
            # HCNS
            ("hcns_main", "hcns.main@nov-reco.com", "Ph·∫°m", "Th·ªã D", UserRole.HCNS, "HCNS001", "HR"),
            ("hcns_recruit", "hcns.recruit@nov-reco.com", "Ho√†ng", "VƒÉn E", UserRole.HCNS, "HCNS002", "HR"),
            
            # Employees
            ("dev_001", "dev.001@nov-reco.com", "V≈©", "VƒÉn F", UserRole.EMPLOYEE, "EMP001", "IT"),
            ("dev_002", "dev.002@nov-reco.com", "ƒê·∫∑ng", "Th·ªã G", UserRole.EMPLOYEE, "EMP002", "IT"),
            ("dev_003", "dev.003@nov-reco.com", "B√πi", "VƒÉn H", UserRole.EMPLOYEE, "EMP003", "IT"),
            ("accountant_001", "accountant.001@nov-reco.com", "Ng√¥", "Th·ªã I", UserRole.EMPLOYEE, "EMP004", "Finance"),
            ("accountant_002", "accountant.002@nov-reco.com", "D∆∞∆°ng", "VƒÉn J", UserRole.EMPLOYEE, "EMP005", "Finance"),
            ("sales_001", "sales.001@nov-reco.com", "L√Ω", "Th·ªã K", UserRole.EMPLOYEE, "EMP006", "Sales"),
            ("sales_002", "sales.002@nov-reco.com", "V√µ", "VƒÉn L", UserRole.EMPLOYEE, "EMP007", "Sales"),
            ("marketing_001", "marketing.001@nov-reco.com", "ƒê·ªó", "Th·ªã M", UserRole.EMPLOYEE, "EMP008", "Marketing"),
            ("ops_001", "ops.001@nov-reco.com", "T·∫°", "VƒÉn N", UserRole.EMPLOYEE, "EMP009", "Operations"),
        ]
        
        users = []
        for username, email, first_name, last_name, role, employee_id, dept_name in users_data:
            # T√¨m department ph√π h·ª£p
            department = None
            if dept_name:
                department = next((d for d in departments if d.name == dept_name), None)
            
            user, created = User.objects.get_or_create(
                username=username,
                defaults={
                    "email": email,
                    "first_name": first_name,
                    "last_name": last_name,
                    "role": role,
                    "employee_id": employee_id,
                    "department": department,
                    "phone": f"090{random.randint(1000000, 9999999)}",
                    "address": f"{random.randint(1, 999)} ƒê∆∞·ªùng {random.choice(['Nguy·ªÖn Hu·ªá', 'L√™ L·ª£i', 'Tr·∫ßn H∆∞ng ƒê·∫°o', 'Hai B√† Tr∆∞ng'])}",
                    "position": self.get_position_for_role(role, dept_name),
                    "hire_date": date.today() - timedelta(days=random.randint(30, 1000)),
                    "is_active_employee": True,
                }
            )
            
            if created:
                user.set_password("password123")
                user.save()
                users.append(user)
                self.stdout.write(f"  ‚úÖ T·∫°o user: {username} ({role})")
            else:
                users.append(user)

        return users

    def get_position_for_role(self, role, dept_name):
        """L·∫•y ch·ª©c v·ª• ph√π h·ª£p v·ªõi role v√† department"""
        positions = {
            UserRole.ADMIN: "Gi√°m ƒë·ªëc ƒëi·ªÅu h√†nh",
            UserRole.MANAGER: {
                "IT": "Tr∆∞·ªüng ph√≤ng IT",
                "HR": "Tr∆∞·ªüng ph√≤ng Nh√¢n s·ª±",
                "Sales": "Tr∆∞·ªüng ph√≤ng Kinh doanh",
                "Finance": "Tr∆∞·ªüng ph√≤ng T√†i ch√≠nh",
                "Marketing": "Tr∆∞·ªüng ph√≤ng Marketing",
                "Operations": "Tr∆∞·ªüng ph√≤ng V·∫≠n h√†nh",
            },
            UserRole.HCNS: {
                "HR": "Chuy√™n vi√™n Nh√¢n s·ª±",
            },
            UserRole.EMPLOYEE: {
                "IT": "L·∫≠p tr√¨nh vi√™n",
                "HR": "Chuy√™n vi√™n Nh√¢n s·ª±",
                "Finance": "K·∫ø to√°n vi√™n",
                "Sales": "Nh√¢n vi√™n Kinh doanh",
                "Marketing": "Chuy√™n vi√™n Marketing",
                "Operations": "Nh√¢n vi√™n V·∫≠n h√†nh",
            }
        }
        
        if role == UserRole.ADMIN:
            return positions[role]
        elif role in [UserRole.MANAGER, UserRole.HCNS, UserRole.EMPLOYEE]:
            return positions[role].get(dept_name, "Nh√¢n vi√™n")
        return "Nh√¢n vi√™n"

    def create_locations(self, users):
        """T·∫°o locations"""
        self.stdout.write("üìç T·∫°o Locations...")
        
        locations_data = [
            ("VƒÉn ph√≤ng ch√≠nh H√† N·ªôi", "T√≤a nh√† NOV-RECO, 123 Nguy·ªÖn Hu·ªá, Ho√†n Ki·∫øm, H√† N·ªôi", 21.0285, 105.8542, 100),
            ("Chi nh√°nh TP.HCM", "T√≤a nh√† Landmark, 456 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM", 10.7769, 106.7009, 150),
            ("Chi nh√°nh ƒê√† N·∫µng", "T√≤a nh√† FPT, 789 L√™ Du·∫©n, H·∫£i Ch√¢u, ƒê√† N·∫µng", 16.0544, 108.2022, 120),
            ("Kho B√¨nh D∆∞∆°ng", "Khu c√¥ng nghi·ªáp VSIP, Thu·∫≠n An, B√¨nh D∆∞∆°ng", 10.9804, 106.6519, 200),
            ("VƒÉn ph√≤ng Qu·∫≠n 7", "T√≤a nh√† Saigon Trade Center, Qu·∫≠n 7, TP.HCM", 10.7308, 106.7194, 80),
        ]
        
        locations = []
        admin_user = next((u for u in users if u.role == UserRole.ADMIN), users[0])
        
        for name, address, lat, lng, radius in locations_data:
            location, created = Location.objects.get_or_create(
                name=name,
                defaults={
                    "description": f"ƒê·ªãa ƒëi·ªÉm {name}",
                    "address": address,
                    "lat": lat,
                    "lng": lng,
                    "radius_m": radius,
                    "is_active": True,
                    "created_by": admin_user,
                }
            )
            locations.append(location)
            if created:
                self.stdout.write(f"  ‚úÖ T·∫°o location: {name}")

        return locations

    def create_absence_types_and_workflows(self, departments):
        """T·∫°o absence types v√† workflows"""
        self.stdout.write("üìã T·∫°o Absence Types v√† Workflows...")
        
        # T·∫°o Absence Types
        absence_types_data = [
            ("Ngh·ªâ ph√©p nƒÉm", "ANNUAL", "Ngh·ªâ ph√©p nƒÉm theo quy ƒë·ªãnh", True, 12, "#10B981"),
            ("Ngh·ªâ ·ªëm", "SICK", "Ngh·ªâ ·ªëm c√≥ gi·∫•y b√°c sƒ©", True, None, "#F59E0B"),
            ("Ngh·ªâ vi·ªác ri√™ng", "PERSONAL", "Ngh·ªâ vi·ªác ri√™ng kh√¥ng l∆∞∆°ng", True, 5, "#3B82F6"),
            ("Ngh·ªâ thai s·∫£n", "MATERNITY", "Ngh·ªâ thai s·∫£n theo quy ƒë·ªãnh", True, 180, "#EC4899"),
            ("Ngh·ªâ kh√¥ng l∆∞∆°ng", "UNPAID", "Ngh·ªâ kh√¥ng l∆∞∆°ng", True, None, "#6B7280"),
        ]
        
        absence_types = []
        for name, code, description, requires_approval, max_days, color in absence_types_data:
            absence_type, created = AbsenceType.objects.get_or_create(
                code=code,
                defaults={
                    "name": name,
                    "description": description,
                    "requires_approval": requires_approval,
                    "max_days_per_year": max_days,
                    "color": color,
                    "is_active": True,
                }
            )
            absence_types.append(absence_type)
            if created:
                self.stdout.write(f"  ‚úÖ T·∫°o absence type: {name}")

        # T·∫°o Approval Workflows
        workflows = []
        for department in departments:
            for absence_type in absence_types:
                workflow, created = ApprovalWorkflow.objects.get_or_create(
                    department=department,
                    absence_type=absence_type,
                    defaults={
                        "requires_department_manager": True,
                        "requires_department_deputy": False,
                        "requires_office_director": absence_type.code in ["MATERNITY", "UNPAID"],
                        "requires_office_deputy": False,
                        "requires_hr_approval": True,
                        "department_manager_priority": 1,
                        "department_deputy_priority": 2,
                        "office_director_priority": 3,
                        "office_deputy_priority": 4,
                        "department_manager_timeout_hours": 24,
                        "department_deputy_timeout_hours": 24,
                        "office_director_timeout_hours": 48,
                        "office_deputy_timeout_hours": 48,
                        "hr_timeout_hours": 24,
                        "is_active": True,
                    }
                )
                workflows.append(workflow)
                if created:
                    self.stdout.write(f"  ‚úÖ T·∫°o workflow: {department.name} - {absence_type.name}")

        return absence_types, workflows

    def create_checkins_and_checkouts(self, users, locations):
        """T·∫°o check-ins v√† check-outs"""
        self.stdout.write("‚è∞ T·∫°o Check-ins v√† Check-outs...")
        
        # T·∫°o check-ins cho 30 ng√†y g·∫ßn ƒë√¢y
        base_date = timezone.now() - timedelta(days=30)
        checkin_count = 0
        checkout_count = 0
        
        for day in range(30):
            current_date = base_date + timedelta(days=day)
            
            # B·ªè qua cu·ªëi tu·∫ßn
            if current_date.weekday() >= 5:
                continue
                
            for user in users:
                if user.role == UserRole.ADMIN:
                    continue
                    
                # 80% chance c√≥ check-in
                if random.random() < 0.8:
                    location = random.choice(locations)
                    
                    # T·∫°o check-in
                    checkin_time = current_date.replace(
                        hour=random.randint(7, 9),
                        minute=random.randint(0, 59),
                        second=0,
                        microsecond=0
                    )
                    
                    # Th√™m noise cho t·ªça ƒë·ªô
                    lat = location.lat + random.uniform(-0.001, 0.001)
                    lng = location.lng + random.uniform(-0.001, 0.001)
                    
                    checkin = Checkin.objects.create(
                        user=user,
                        location=location,
                        lat=lat,
                        lng=lng,
                        address=location.address,
                        note=random.choice(["", "Check-in s√°ng", "ƒêi l√†m ƒë√∫ng gi·ªù", ""]),
                        checkin_type=random.choice([CheckinType.WORK, CheckinType.VISITOR]),
                        distance_m=random.uniform(10, 50),
                        ip=f"192.168.1.{random.randint(1, 254)}",
                        user_agent="Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)",
                        created_at=checkin_time
                    )
                    checkin_count += 1
                    
                    # 70% chance c√≥ check-out
                    if random.random() < 0.7:
                        checkout_time = checkin_time + timedelta(
                            hours=random.randint(8, 10),
                            minutes=random.randint(0, 59)
                        )
                        
                        Checkout.objects.create(
                            user=user,
                            checkin=checkin,
                            lat=lat + random.uniform(-0.001, 0.001),
                            lng=lng + random.uniform(-0.001, 0.001),
                            address=location.address,
                            note=random.choice(["", "Check-out chi·ªÅu", "Ho√†n th√†nh c√¥ng vi·ªác", ""]),
                            distance_m=random.uniform(10, 50),
                            ip=f"192.168.1.{random.randint(1, 254)}",
                            user_agent="Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X)",
                            created_at=checkout_time
                        )
                        checkout_count += 1

        self.stdout.write(f"  ‚úÖ T·∫°o {checkin_count} check-ins v√† {checkout_count} check-outs")

    def create_absence_requests(self, users, absence_types, workflows):
        """T·∫°o absence requests"""
        self.stdout.write("üìù T·∫°o Absence Requests...")
        
        absence_count = 0
        for user in users:
            if user.role == UserRole.ADMIN:
                continue
                
            # 30% chance c√≥ ƒë∆°n xin ngh·ªâ
            if random.random() < 0.3:
                absence_type = random.choice(absence_types)
                workflow = next((w for w in workflows if w.department == user.department and w.absence_type == absence_type), None)
                
                if workflow:
                    start_date = date.today() + timedelta(days=random.randint(1, 30))
                    end_date = start_date + timedelta(days=random.randint(1, 5))
                    
                    absence_request = AbsenceRequest.objects.create(
                        user=user,
                        absence_type=absence_type,
                        workflow=workflow,
                        start_date=start_date,
                        end_date=end_date,
                        total_days=Decimal(str((end_date - start_date).days + 1)),
                        reason=random.choice([
                            "Ngh·ªâ ph√©p nƒÉm",
                            "C√≥ vi·ªác gia ƒë√¨nh",
                            "ƒêi du l·ªãch",
                            "Ngh·ªâ ·ªëm",
                            "Vi·ªác ri√™ng",
                        ]),
                        status=random.choice(["pending", "approved", "rejected"]),
                        current_approver=user.department.manager if user.department and user.department.manager else None,
                        approval_level="department_manager",
                    )
                    absence_count += 1
                    
                    # T·∫°o approval history n·∫øu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
                    if absence_request.status in ["approved", "rejected"]:
                        ApprovalHistory.objects.create(
                            absence_request=absence_request,
                            approver=absence_request.current_approver or user,
                            action="approved" if absence_request.status == "approved" else "rejected",
                            level="department_manager",
                            comment=random.choice([
                                "ƒê·ªìng √Ω",
                                "Kh√¥ng ƒë·ªìng √Ω",
                                "C·∫ßn xem x√©t th√™m",
                            ])
                        )

        self.stdout.write(f"  ‚úÖ T·∫°o {absence_count} absence requests")

    def create_notifications(self, users):
        """T·∫°o notifications"""
        self.stdout.write("üîî T·∫°o Notifications...")
        
        notification_count = 0
        for user in users:
            # T·∫°o 2-5 notifications cho m·ªói user
            for _ in range(random.randint(2, 5)):
                notification = Notification.objects.create(
                    user=user,
                    title=random.choice([
                        "Th√¥ng b√°o check-in",
                        "ƒê∆°n xin ngh·ªâ c·∫ßn ph√™ duy·ªát",
                        "Th√¥ng b√°o h·ªá th·ªëng",
                        "Nh·∫Øc nh·ªü c√¥ng vi·ªác",
                        "C·∫≠p nh·∫≠t th√¥ng tin",
                    ]),
                    message=random.choice([
                        "B·∫°n c√≥ ƒë∆°n xin ngh·ªâ c·∫ßn ph√™ duy·ªát",
                        "H·ªá th·ªëng s·∫Ω b·∫£o tr√¨ v√†o cu·ªëi tu·∫ßn",
                        "Vui l√≤ng c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n",
                        "C√≥ check-in b·∫•t th∆∞·ªùng c·∫ßn xem x√©t",
                        "Th√¥ng b√°o m·ªõi t·ª´ qu·∫£n l√Ω",
                    ]),
                    type=random.choice([
                        "approval_required",
                        "system",
                        "checkin",
                        "absence",
                        "reminder",
                    ]),
                    is_read=random.choice([True, False]),
                    is_important=random.random() < 0.2,
                )
                notification_count += 1

        self.stdout.write(f"  ‚úÖ T·∫°o {notification_count} notifications")

    def create_test_sessions(self, users):
        """T·∫°o test sessions"""
        self.stdout.write("üß™ T·∫°o Test Sessions...")
        
        test_count = 0
        for user in users[:3]:  # Ch·ªâ t·∫°o cho 3 user ƒë·∫ßu
            for _ in range(random.randint(1, 3)):
                session = TestSession.objects.create(
                    session_id=f"TEST_{user.username}_{random.randint(1000, 9999)}",
                    user=user,
                    status=random.choice(["completed", "failed", "running"]),
                    total_tests=random.randint(10, 50),
                    passed_tests=random.randint(5, 45),
                    failed_tests=random.randint(0, 5),
                    skipped_tests=random.randint(0, 3),
                    duration=random.uniform(30, 300),
                    notes=random.choice([
                        "Test ch·ª©c nƒÉng check-in",
                        "Test h·ªá th·ªëng th√¥ng b√°o",
                        "Test qu·∫£n l√Ω ng∆∞·ªùi d√πng",
                    ])
                )
                test_count += 1
                
                # T·∫°o test results
                for i in range(session.total_tests):
                    TestResult.objects.create(
                        session=session,
                        test_name=f"test_{i+1}",
                        module=random.choice(["checkin", "users", "notifications", "absence"]),
                        status=random.choice(["passed", "failed", "skipped"]),
                        duration=random.uniform(0.1, 5.0),
                        error_message="" if random.random() < 0.8 else "Test failed due to timeout",
                    )

        self.stdout.write(f"  ‚úÖ T·∫°o {test_count} test sessions")

    def print_login_info(self, users):
        """In th√¥ng tin ƒëƒÉng nh·∫≠p"""
        self.stdout.write("\n" + "="*60)
        self.stdout.write(self.style.SUCCESS("üéâ TH√îNG TIN ƒêƒÇNG NH·∫¨P"))
        self.stdout.write("="*60)
        
        # Group users by role
        users_by_role = {}
        for user in users:
            if user.role not in users_by_role:
                users_by_role[user.role] = []
            users_by_role[user.role].append(user)
        
        for role, role_users in users_by_role.items():
            role_display = dict(UserRole.choices)[role]
            self.stdout.write(f"\n{role_display}:")
            for user in role_users[:3]:  # Ch·ªâ hi·ªÉn th·ªã 3 user ƒë·∫ßu
                self.stdout.write(f"  üë§ {user.username} / password123")
                if user.department:
                    self.stdout.write(f"     Ph√≤ng ban: {user.department.name}")
        
        self.stdout.write("\n" + "="*60)
        self.stdout.write("üîë M·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh: password123")
        self.stdout.write("="*60)
